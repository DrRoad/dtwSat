% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twdtw.R
\docType{methods}
\name{twdtw}
\alias{twdtw}
\title{Perform Time-Weighted Dynamic Time Warping alignment}
\usage{
twdtw(x, ..., patterns = list(...), normalize.patterns = FALSE,
  patterns.length = NULL, weight.fun = NULL, dist.method = "Euclidean",
  step.matrix = symmetric1, n = NULL, span = NULL, theta = 0.5,
  keep = FALSE)
}
\arguments{
\item{x}{A \link[zoo]{zoo} object with a time series similar 
to \code{patterns}. \code{x} must have the same number of attributes
and be equal to or longer than the \code{patterns}, 
\emph{i.e.} \code{nrow(patterns)<=nrow(x)}.}

\item{...}{\link[zoo]{zoo} objects.}

\item{patterns}{a list of \link[zoo]{zoo} objects.}

\item{normalize.patterns}{Normalize queries length. Default is FALSE.}

\item{patterns.length}{An integer. Queries length used with normalize. 
If not declared the length of the output queries will be the length of 
the longest patterns.}

\item{weight.fun}{A function that receives a matrix of time differences in days and 
returns a matrix of time-weights. If not declared the time-weight is zero.}

\item{dist.method}{A character. Method to derive the local cost matrix.
Default is ''Euclidean'' See \code{\link[proxy]{dist}} in package 
\pkg{proxy}.}

\item{step.matrix}{see \code{\link[dtw]{stepPattern}} in package \pkg{dtw} [1]}

\item{n}{An integer. The maximun number of alignments to perform. 
NULL will return all possible alignments without overlaps.}

\item{span}{A number. Span between two matches, \emph{i.e.} the minimum
interval between two matches, for details see [2]. If not declared it removes
all overlapping matches of the same pattern.}

\item{theta}{numeric between 0 and 1. The weight of the time 
for the TWDTW computation. Use \code{theta=0} to cancel the time-weight, 
\emph{i.e.} to run the original DTW algorithm. Default is 0.5.}

\item{keep}{preserves the cost matrix, inputs, and other internal structures. 
Default is FALSE.}
}
\value{
A \code{\link[dtwSat]{twdtw-class}} object.
}
\description{
This function performs a multidimensional Time-Weighted DTW 
analysis and retrieves the matches between the temporal patterns and 
the time series.
}
\examples{
log_fun = logisticWeight(alpha=-0.1, beta=100)

# Perform twdtw analysis for a single pixel 
matches = twdtw(x=example_ts, patterns=patterns.list, weight.fun = log_fun, 
             keep=TRUE)
getPatternNames(matches)
getAlignments(matches)
getMatches(matches)
getInternals(matches)

# Perform twdtw for a list pixel 
matches = lapply(example_ts.list, FUN=twdtw, patterns=patterns.list, 
               weight.fun = log_fun, keep=TRUE)

matches

### Perform twdtw in parallel for a list pixel 
# require(parallel)
# matches = mclapply(example_ts.list, FUN=twdtw, patterns=patterns.list, 
#                  weight.fun = log_fun, keep=TRUE, mc.cores=2)
# matches
               
}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
\references{
[1] Giorgino, T. (2009). Computing and Visualizing Dynamic Time Warping Alignments in R: 
The dtw Package. Journal of Statistical Software, 31, 1-24.

[2] M\"uller, M. (2007). Dynamic Time Warping. In Information Retrieval for Music 
and Motion (pp. 79-84). London: Springer London, Limited.

[3] Maus  V,  C\^{a}mara  G,  Cartaxo  R,  Sanchez  A,  Ramos  FM,  de Queiroz, GR.
(2016). A Time-Weighted Dynamic Time Warping method for land use and land cover 
mapping. Selected Topics in Applied Earth Observations and Remote Sensing, 
IEEE Journal of, X, XX-XX.
}
\seealso{
\code{\link[dtwSat]{twdtw-class}},
\code{\link[dtwSat]{linearWeight}}, 
\code{\link[dtwSat]{logisticWeight}},
\code{\link[dtwSat]{summary-twdtw-method}},  
\code{\link[dtwSat]{plot-twdtw-ANY-method}}, 
\code{\link[dtwSat]{getPatternNames}},
\code{\link[dtwSat]{getAlignments}}, 
\code{\link[dtwSat]{getMatches}},
\code{\link[dtwSat]{getInternals}}, and 
\code{\link[dtwSat]{nmatches}}.
}

