% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twdtw.R
\docType{methods}
\name{twdtw}
\alias{twdtw}
\title{Perform Time-Weighted Dynamic Time Warping}
\usage{
twdtw(x, ..., patterns = list(...), normalize.patterns = FALSE,
  patterns.length = NULL, weight.fun = NULL, dist.method = "Euclidean",
  step.matrix = symmetric1, n = NULL, span = NULL, min.length = 0.5,
  theta = 0.5, keep = FALSE)
}
\arguments{
\item{x}{A \link[zoo]{zoo} object with a time series.}

\item{...}{\link[zoo]{zoo} objects.}

\item{patterns}{a list of \link[zoo]{zoo} objects.}

\item{normalize.patterns}{Normalize patterns length. Default is FALSE.
See \link[dtwSat]{normalizePatterns} for details.}

\item{patterns.length}{An integer. Patterns length used with \code{patterns.length}. 
If not declared the length of the output patterns will be the length of 
the longest pattern.}

\item{weight.fun}{A function. Any function that receive and performs a 
computation on a matrix. The function receives a matrix of time differences 
in days and returns a matrix of time-weights. If not declared the time-weight 
is zero. In this case the function runs the standard version of the dynamic 
time warping. See details.}

\item{dist.method}{A character. Method to derive the local cost matrix.
Default is ''Euclidean'' see \code{\link[proxy]{dist}} in package 
\pkg{proxy}.}

\item{step.matrix}{see \code{\link[dtw]{stepPattern}} in package \pkg{dtw} [2].}

\item{n}{An integer. The maximun number of matches to perform. 
NULL will return all matches.}

\item{span}{A number. Span between two matches, \emph{i.e.} the minimum
interval between two matches, for details see [3]. If not declared it removes
all overlapping matches of the same pattern. To include overlapping matches 
of the same pattern use \code{span=0}.}

\item{min.length}{A number between 0 an 1. This argument removes the over fittings.
Minimum length after warping. Percentage of the original pattern length. Default is 0.5, 
meaning that the matching cannot be shorter than half of the pattern length.}

\item{theta}{numeric between 0 and 1. The weight of the time 
for the TWDTW computation. Use \code{theta=0} to cancel the time-weight, 
\emph{i.e.} to run the original DTW algorithm. Default is 0.5, meaning that 
the time has the same weight as the curve shape in the TWDTW analysis.}

\item{keep}{preserves the cost matrix, inputs, and other internal structures. 
Default is FALSE. For \code{\link[dtwSat]{plot-method}} methods use \code{keep=TRUE}.}
}
\value{
A \code{\link[dtwSat]{twdtw-class}} object.
}
\description{
This function performs a multidimensional Time-Weighted DTW 
analysis and retrieves the matches between the temporal patterns and 
the time series [1].
}
\details{
The linear \code{linearWeight} and \code{logisticWeight} weight functions 
can be passed to \code{twdtw} through the argument \code{weight.fun}. This will 
add a time-weight to the dynamic time warping analysis. The time weight 
creates a global constraint useful to analyse time series with phenological cycles
of vegetation that are usually bound to seasons. In previous studies by [1] the 
logistic weight had better results than the linear for land cover classification. 
See [1] for details about the method.
}
\examples{
log_fun = logisticWeight(alpha=-0.1, beta=100)

# Perform twdtw analysis for a single pixel 
matches = twdtw(x=example_ts, patterns=patterns.list, weight.fun = log_fun, 
             keep=TRUE)
             
getPatternNames(matches)
getAlignments(matches)
getMatches(matches)
getInternals(matches)
plot(matches)
plot(matches, type="paths")

# Perform twdtw for a list pixel 
matches = lapply(example_ts.list, FUN=twdtw, patterns=patterns.list, 
               weight.fun = log_fun, keep=TRUE)

matches

### Perform twdtw in parallel for a list pixel 
\dontrun{
require(parallel)
matches = mclapply(example_ts.list, FUN=twdtw, patterns=patterns.list, 
          weight.fun = log_fun, keep=TRUE, mc.cores=2)
matches
}               
}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
\references{
[1] Maus  V,  Camara  G,  Cartaxo  R,  Sanchez  A,  Ramos  FM,  de Queiroz, GR.
(2016). A Time-Weighted Dynamic Time Warping method for land use and land cover 
mapping. Selected Topics in Applied Earth Observations and Remote Sensing, 
IEEE Journal of, vol.PP, no.99, pp.1-11.

[2] Giorgino, T. (2009). Computing and Visualizing Dynamic Time Warping Alignments in R: 
The dtw Package. Journal of Statistical Software, 31, 1-24.

[3] M\"uller, M. (2007). Dynamic Time Warping. In Information Retrieval for Music 
and Motion (pp. 79-84). London: Springer London, Limited.
}
\seealso{
\code{\link[dtwSat]{twdtw-class}},
\code{\link[dtwSat]{show-method}},  
\code{\link[dtwSat]{length-method}}, 
\code{\link[dtwSat]{summary-method}},  
\code{\link[dtwSat]{plot-method}}, 
\code{\link[dtwSat]{getPatternNames}},
\code{\link[dtwSat]{getAlignments}}, 
\code{\link[dtwSat]{getMatches}},
\code{\link[dtwSat]{getInternals}},
\code{\link[dtwSat]{linearWeight}}, 
\code{\link[dtwSat]{logisticWeight}}, and 
\code{\link[dtwSat]{nmatches}}.
}

