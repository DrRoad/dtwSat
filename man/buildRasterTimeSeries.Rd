% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildRasterTimeSeries.R
\docType{methods}
\name{buildRasterTimeSeries}
\alias{buildRasterTimeSeries}
\title{Build raster time series}
\usage{
buildRasterTimeSeries(x, timeline, doy, filepath = NULL, mc.cores = 1, ...)
}
\arguments{
\item{x}{A list of \code{\link[raster]{RasterBrick-class}} or 
\code{\link[raster]{RasterStack-class}}
Each layer of the Raster* object is a time step.}

\item{timeline}{A vector of \code{\link[base]{Dates}}
It must have the length of the layers in the Raster* object.}

\item{doy}{optional. A \code{\link[raster]{RasterBrick-class}} or 
\code{\link[raster]{RasterStack-class}} with the same spatial and temporal extent 
as the Raster* objects in \code{x}.}

\item{filepath}{A character. The path to save the raster time series. If informed the 
function saves a raster file for each Raster* object in the list, \emph{i.e} one file 
for each time series. This way the function retrieves an list of 
\code{\link[raster]{RasterBrick-class}} objects. See details.}

\item{mc.cores}{The number of cores to use, See \code{\link[parallel]{mclapply}} 
for details.}

\item{...}{other arguments to pass to the function \code{\link[raster]{writeRaster}}.}
}
\value{
details a list of \code{\link[raster]{RasterBrick-class}} or 
\code{\link[raster]{RasterStack-class}} objects.
}
\description{
This function creates a list of raster time series.
}
\details{
The performance the functions \code{\link[dtwSat]{twdtwApply}} and 
\code{\link[dtwSat]{extractTimeSeries}} is improved if the Raster* objects are connected 
to files with the whole time series for each attribute.
}
\examples{

#### In this example we build a MOD13Q1 EVI raster time series. 
#### The file 'evi.tif' has 999 EVI time series from 2007-01-01 to 2013-12-19, 
#### that means 160 points with temporal resolution of 16 days. 
# require(raster)
# evi = brick(system.file("lucc_MT/raster_ts/evi.tif",  package = "dtwSat"))
# time = read.csv(system.file("lucc_MT/timeline.csv",  package = "dtwSat"), 
#        as.is=TRUE)
# raster_evi_ts = buildRasterTimeSeries(x = evi, timeline = dates$date)


#### In this example we build a multi-band MOD13Q1 raster time series. 
#### The 'tif' files in 'lucc_MT/raster_ts' have 999 EVI time series 
#### from 2007-01-01 to 2013-12-19, that means 160 points with temporal 
#### resolution of 16 days. 
# blue = brick(system.file("lucc_MT/raster_ts/blue.tif",  package = "dtwSat"))
# red  = brick(system.file("lucc_MT/raster_ts/red.tif",  package = "dtwSat"))
# nir  = brick(system.file("lucc_MT/raster_ts/nir.tif",  package = "dtwSat"))
# mir  = brick(system.file("lucc_MT/raster_ts/mir.tif",  package = "dtwSat"))
# evi  = brick(system.file("lucc_MT/raster_ts/evi.tif",  package = "dtwSat"))
# ndvi = brick(system.file("lucc_MT/raster_ts/ndvi.tif",  package = "dtwSat"))
# raster_bands = c(blue=blue, red=red, nir=nir, mir=mir, evi=evi, ndvi=ndvi)
# time = read.csv(system.file("lucc_MT/timeline.csv",  package = "dtwSat"), 
#        as.is=TRUE)
# raster_timeseries = 
#                buildRasterTimeSeries(x = raster_bands, timeline = time$date)
     
     
#### In the next example we extract and plot a multi-band time series from 
#### our raster time series built in the example above. 

## Location and time range 
# ts_location = data.frame(longitude = -55.96957, latitude = -12.03864, 
#                        from = "2007-09-01", to = "2013-09-01")
 
## Proj string 
# crs_string = "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"

## Extract time series 
# ts = extractTimeSeries(x = raster_timeseries, y = ts_location, 
#                        proj4string = crs_string)
 
#library(ggplot2)
#autoplot(ts[[1]], facets = NULL) + xlab("Time") + ylab("Value")


}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
\seealso{
\code{\link[dtwSat]{twdtwApply}}, and
\code{\link[dtwSat]{plotLUCC}}.
}

