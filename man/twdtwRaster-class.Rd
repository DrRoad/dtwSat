% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-twdtwRaster.R, R/getTimeSeries.R, R/labels.R, R/show.R, R/utils.R
\docType{methods}
\name{twdtwRaster-class}
\alias{[,twdtwRaster,ANY,ANY,ANY-method}
\alias{[[,twdtwRaster,ANY,ANY-method}
\alias{dim,twdtwRaster-method}
\alias{extent,twdtwRaster-method}
\alias{getTimeSeries,twdtwRaster-method}
\alias{index,twdtwRaster-method}
\alias{labels,twdtwRaster-method}
\alias{length,twdtwRaster-method}
\alias{names,twdtwRaster-method}
\alias{ncol,twdtwRaster-method}
\alias{nlayers,twdtwRaster-method}
\alias{nrow,twdtwRaster-method}
\alias{projection,twdtwRaster-method}
\alias{res,twdtwRaster-method}
\alias{show,twdtwRaster-method}
\alias{twdtwRaster,ANY-method}
\alias{twdtwRaster-class}
\title{class "twdtwRaster"}
\usage{
\S4method{twdtwRaster}{ANY}(..., timeline, doy = NULL, layers = NULL,
  labels = NULL, filepath = NULL)

\S4method{getTimeSeries}{twdtwRaster}(object, samples,
  proj4string = CRS(as.character(NA)), id.labels = NULL, labels = NULL,
  join.labels = TRUE)

\S4method{labels}{twdtwRaster}(object)

\S4method{show}{twdtwRaster}(object)

\S4method{dim}{twdtwRaster}(x)

\S4method{res}{twdtwRaster}(x)

\S4method{extent}{twdtwRaster}(x)

\S4method{projection}{twdtwRaster}(x)

\S4method{ncol}{twdtwRaster}(x)

\S4method{nrow}{twdtwRaster}(x)

\S4method{nlayers}{twdtwRaster}(x)

\S4method{names}{twdtwRaster}(x)

\S4method{index}{twdtwRaster}(x)

\S4method{length}{twdtwRaster}(x)

\S4method{[}{twdtwRaster,ANY,ANY,ANY}(x, i)

\S4method{[[}{twdtwRaster,ANY,ANY}(x, i)
}
\arguments{
\item{...}{objects of class \code{\link[raster]{RasterBrick-class}} or 
\code{\link[raster]{RasterStack-class}}.}

\item{timeline}{a vector with the dates of the satellite images 
in the format of "YYYY-MM-DD".}

\item{doy}{A \code{\link[raster]{RasterBrick-class}} or 
\code{\link[raster]{RasterStack-class}} with a sequence of days of the year for each pixel. 
\code{doy} must have the same spatial and temporal extents as the Raster* objects passed to \code{...}.
If \code{doy} is not informed then at least one Raster* object must be passed through \code{...}.}

\item{layers}{a vector with the names of the \code{Raster*} objects 
passed to "\code{...}". If not informed the layers are set to the 
names of objects in "\code{...}".}

\item{labels}{a vector of class \code{\link[base]{factor}} with 
levels and labels of the values in the Raster* objects. This is 
useful for categorical Raster* values of land use classes.}

\item{filepath}{A character. The path to save the raster time series. If informed the 
function saves a raster file for each Raster* object in the list, \emph{i.e} one file 
for each time series. This way the function retrieves an list of 
\code{\link[raster]{RasterBrick-class}}. It is useful when the time series are 
originally stores in separated files. See details.}

\item{object}{an object of class twdtwRaster.}

\item{samples}{a \code{\link[base]{data.frame}} whose attributes are: longitude, 
latitude, the start ''from'' and the end ''to'' of the time interval 
for each sample. This can also be a \code{\link[sp]{SpatialPointsDataFrame}} 
whose attributes are the start ''from'' and the end ''to'' of the time interval.
If missing ''from'' and/or ''to'', their are set to the time range of the object
\code{object}. 
As additional attribute of \code{samples} can be used as labels for each sample. 
See \code{id.labels}.}

\item{proj4string}{projection string, see \code{\link[sp]{CRS-class}}. Used 
if \code{samples} is a \code{\link[base]{data.frame}}.}

\item{id.labels}{a numeric or character with an attribute of \code{samples} to 
be used as labels of the samples. Optional.}

\item{join.labels}{a logical. It TRUE the function joins labels that are identical 
to a factor. If FALSE a different label is kept for each samples.}

\item{x}{an object of class twdtwRaster.}

\item{i}{indices of the time series.}

\item{object}{an object of class \code{\link[dtwSat]{twdtwRaster}}.}

\item{labels}{character vector with samples labels. It must have one label for each 
sample. Optional.}
}
\description{
Class for set of satellite time series.
}
\details{
The performance the functions \code{\link[dtwSat]{twdtwApply}} and 
\code{\link[dtwSat]{getTimeSeries}} is improved if the Raster* objects are connected 
to files with the whole time series for each attribute.
}
\section{Methods (by generic)}{
\itemize{
\item \code{twdtwRaster}: Create object of class twdtwRaster.

\item \code{getTimeSeries}: Get subsets of time series from objects of class twdtwRaster.
}}
\section{Slots }{

\describe{
 \item{\code{timeseries}:}{A list of multi-layers Raster* objects 
       with the satellite image time series.}
 \item{\code{timeline}:}{A vector of class \code{\link[base]{date}} 
       with dates of the satellite images in \code{timeseries}.}
 \item{\code{layers}:}{A vector of class \code{\link[base]{character}} 
       with the names of the Raster* objects.}
 \item{\code{labels}:}{A vector of class \code{\link[base]{factor}} 
       with levels and labels of the values in the Raster* objects. This 
       is useful for categorical Raster* values of land use classes.}
}
}
\examples{
# Creating new object of class twdtwTimeSeries 
evi = brick(system.file("lucc_MT/data/evi.tif", package="dtwSat"))
timeline = scan(system.file("lucc_MT/data/timeline", package="dtwSat"), what="date")
rts = new("twdtwRaster", timeseries = evi, timeline = timeline)

# Creating objects of class twdtwRaster 
evi = brick(system.file("lucc_MT/data/evi.tif", package="dtwSat"))
ndvi = brick(system.file("lucc_MT/data/ndvi.tif", package="dtwSat"))
blue = brick(system.file("lucc_MT/data/blue.tif", package="dtwSat"))
red = brick(system.file("lucc_MT/data/red.tif", package="dtwSat"))
nir = brick(system.file("lucc_MT/data/nir.tif", package="dtwSat"))
mir = brick(system.file("lucc_MT/data/mir.tif", package="dtwSat"))
doy = brick(system.file("lucc_MT/data/doy.tif", package="dtwSat"))
timeline = scan(system.file("lucc_MT/data/timeline", package="dtwSat"), what="date")
rts = twdtwRaster(evi, ndvi, blue, red, nir, mir, timeline=timeline, doy=doy)

# Read field samples 
field_samples = read.csv(system.file("lucc_MT/data/samples.csv", package="dtwSat"))
proj_str = scan(system.file("lucc_MT/data/samples_projection", package="dtwSat"), 
           what="character")

# Get time series 
ts_samples = getTimeSeries(rts, samples=field_samples, proj4string = proj_str, id.labels="label")

}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}

