% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-twdtwAssessment.R, R/methods.R, R/twdtwAssess.R, R/xtable.R
\docType{methods}
\name{twdtwAssessment-class}
\alias{show,twdtwAssessment-method}
\alias{twdtwAssess}
\alias{twdtwAssess,twdtwRaster-method}
\alias{twdtwAssessment}
\alias{twdtwAssessment-class}
\alias{xtable}
\alias{xtable,twdtwAssessment-method}
\title{class "twdtwAssessment"}
\usage{
\S4method{show}{twdtwAssessment}(object)

\S4method{twdtwAssess}{twdtwRaster}(object, y, labels = NULL,
  id.labels = NULL, proj4string = NULL, conf.int = 0.95)

\S4method{xtable}{twdtwAssessment}(x, type = "accuracy", time.labels = NULL,
  ...)
}
\arguments{
\item{object}{an object of class \code{\link[dtwSat]{twdtwRaster}} resulting from 
the classification, i.e. \code{\link[dtwSat]{twdtwClassify}}.}

\item{y}{a \code{\link[base]{data.frame}} whose attributes are: longitude, 
latitude, the start ''from'' and the end ''to'' of the time interval 
for each sample. This can also be a \code{\link[sp]{SpatialPointsDataFrame}} 
whose attributes are the start ''from'' and the end ''to'' of the time interval.
If missing ''from'' and/or ''to'', they are set to the time range of the 
\code{object}.}

\item{labels}{character vector with time series labels. For signature 
\code{\link[dtwSat]{twdtwRaster}} this argument can be used to set the 
labels for each sample in \code{y}, or it can be combined with \code{id.labels} 
to select samples with a specific label.}

\item{id.labels}{a numeric or character with an column name from \code{y} to 
be used as samples labels. Optional.}

\item{proj4string}{projection string, see \code{\link[sp]{CRS-class}}. Used 
if \code{y} is a \code{\link[base]{data.frame}}.}

\item{conf.int}{specifies the confidence level (0-1).}

\item{x}{an object of class \code{\link[dtwSat]{twdtwAssessment}}.}

\item{type}{table type, 'accuracy' for User's and Producer's Accuracy, 
'matrix' for error matrix, and 'area' for area and uncertainty. 
Default is 'accuracy'.}

\item{time.labels}{a character or numeric for the time period or NULL to 
include all classified periods. Default is NULL.}

\item{...}{other arguments to pass to \code{\link[xtable]{xtable}}.}
}
\description{
This class stores the map assessment.
}
\details{
If the twdtwRaster is unprojected (longitude/latitude) the estimated area is sum of the approximate 
surface area in km2 of each cell (pixel). If the twdtwRaster is projected the estimated area is calculated 
using the the pixel resolution in the map unit.
}
\section{Methods (by generic)}{
\itemize{
\item \code{twdtwAssess}: This function performs an accuracy assessment 
of the classified maps. The function returns Overall Accuracy, 
User's Accuracy, Produce's Accuracy, error matrix (confusion matrix),
and estimated area according to [1]. The function returns the metrics 
for each time interval and a summary considering all classified intervals.
}}
\section{Slots }{

\describe{
 \item{\code{accuracySummary}:}{Overall Accuracy, User's Accuracy, Produce's Accuracy, 
 Error Matrix (confusion matrix), and Estimated Area, considering all time periods.}
 \item{\code{accuracyByPeriod}:}{Overall Accuracy, User's Accuracy, Produce's Accuracy, 
 Error Matrix (confusion matrix), and Estimated Area, for each time periods independently 
 from each other.}
 \item{\code{data}:}{A \code{\link[base]{data.frame}} with period (from - to), reference labels, 
 predicted labels, and other TWDTW information.}
}
}
\examples{
\dontrun{

}
\dontrun{

# Create raster time series
evi = brick(system.file("lucc_MT/data/evi.tif", package="dtwSat"))
ndvi = brick(system.file("lucc_MT/data/ndvi.tif", package="dtwSat"))
red = brick(system.file("lucc_MT/data/red.tif", package="dtwSat"))
blue = brick(system.file("lucc_MT/data/blue.tif", package="dtwSat"))
nir = brick(system.file("lucc_MT/data/nir.tif", package="dtwSat"))
mir = brick(system.file("lucc_MT/data/mir.tif", package="dtwSat"))
doy = brick(system.file("lucc_MT/data/doy.tif", package="dtwSat"))
timeline = scan(system.file("lucc_MT/data/timeline", package="dtwSat"), what="date")
rts = twdtwRaster(evi, ndvi, red, blue, nir, mir, timeline = timeline, doy = doy)

# Read fiels samples 
field_samples = read.csv(system.file("lucc_MT/data/samples.csv", package="dtwSat"))
proj_str = scan(system.file("lucc_MT/data/samples_projection", 
                package="dtwSat"), what = "character")

# Split samples for training (10\%) and validation (90\%) using stratified sampling 
library(caret) 
set.seed(1)
I = unlist(createDataPartition(field_samples$label, p = 0.1))
training_samples = field_samples[I,]
validation_samples = field_samples[-I,]

# Create temporal patterns 
training_ts = getTimeSeries(rts, y = training_samples, proj4string = proj_str)
temporal_patterns = createPatterns(training_ts, freq = 8, formula = y ~ s(x))

# Run TWDTW analysis for raster time series 
log_fun = weight.fun=logisticWeight(-0.1,50)
r_twdtw = twdtwApply(x=rts, y=temporal_patterns, weight.fun=log_fun, format="GTiff", 
                     overwrite=TRUE)
                     
# Classify raster based on the TWDTW analysis 
r_lucc = twdtwClassify(r_twdtw, format="GTiff", overwrite=TRUE)
plot(r_lucc)

# Assess classification 
twdtw_assess = twdtwAssess(r_lucc, validation_samples, proj4string=proj_str) 
twdtw_assess

}
}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
\seealso{
\code{\link[dtwSat]{twdtwRaster-class}}, and 
\code{\link[dtwSat]{twdtwClassify}}.
}

