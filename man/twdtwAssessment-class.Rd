% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-twdtwAccuracy.R, R/twdtwAssessment.R
\docType{methods}
\name{twdtwAssessment-class}
\alias{twdtwAssessment}
\alias{twdtwAssessment,ANY-method}
\alias{twdtwAssessment-class}
\title{class "twdtwAssessment"}
\usage{
\S4method{twdtwAssessment}{ANY}(object, y, id.labels, proj4string, conf.int)
}
\arguments{
\item{object}{an object of class \code{\link[dtwSat]{twdtwRaster}} resulting from 
the classification, i.e. \code{\link[dtwSat]{twdtwClassify}}.}

\item{y}{a \code{\link[base]{data.frame}} whose attributes are: longitude, 
latitude, the start ''from'' and the end ''to'' of the time interval 
for each sample. This can also be a \code{\link[sp]{SpatialPointsDataFrame}} 
whose attributes are the start ''from'' and the end ''to'' of the time interval.
If missing ''from'' and/or ''to'', they are set to the time range of the 
\code{object}.}

\item{id.labels}{a numeric or character with an column name from \code{y} to 
be used as samples labels. Optional.}

\item{proj4string}{projection string, see \code{\link[sp]{CRS-class}}. Used 
if \code{y} is a \code{\link[base]{data.frame}}.}

\item{conf.int}{specifies the confidence level.}
}
\description{
This class stores the map assessment.
}
\section{Methods (by generic)}{
\itemize{
\item \code{twdtwAssessment}: this function performs an accuracy assessment 
of the classified maps. The function returns Overall Accuracy, 
User's Accuracy, Produce's Accuracy, and error matrix (confusion matrix) for 
each time interval and a summary considering all classified intervals.
}}
\section{Slots }{

\describe{
 \item{\code{accuracy}:}{A list with the accuracy for each classified time period.}
 \item{\code{data}:}{A \code{\link[base]{data.frame}} with reference labels, predicted labels, 
 and other TWDTW information.}
}
}
\examples{
\dontrun{

}
\dontrun{

# Create raster time series

evi = brick(system.file("lucc_MT/data/evi.tif", package="dtwSat"))
ndvi = brick(system.file("lucc_MT/data/ndvi.tif", package="dtwSat"))
red = brick(system.file("lucc_MT/data/red.tif", package="dtwSat"))
blue = brick(system.file("lucc_MT/data/blue.tif", package="dtwSat"))
nir = brick(system.file("lucc_MT/data/nir.tif", package="dtwSat"))
mir = brick(system.file("lucc_MT/data/mir.tif", package="dtwSat"))
doy = brick(system.file("lucc_MT/data/doy.tif", package="dtwSat"))
timeline = scan(system.file("lucc_MT/data/timeline", package="dtwSat"), what="date")

rts = twdtwRaster(evi, ndvi, red, blue, nir, mir, timeline = timeline, doy = doy)
field_samples = read.csv(system.file("lucc_MT/data/samples.csv", package="dtwSat"))
proj_str = scan(system.file("lucc_MT/data/samples_projection", 
                package="dtwSat"), what = "character")
field_samples_ts = getTimeSeries(rts, y = field_samples, proj4string = proj_str)
temporal_patterns = createPatterns(field_samples_ts, freq = 8, formula = y ~ s(x))
log_fun = weight.fun=logisticWeight(-0.1,50)

# Run TWDTW analysis for raster time series 

r_twdtw = twdtwApply(x=rts, y=temporal_patterns, weight.fun=log_fun, format="GTiff", 
                     overwrite=TRUE, chunk.size=1000)

r_lucc = twdtwClassify(r_twdtw, format="GTiff", overwrite=TRUE)

log_fun = weight.fun=logisticWeight(-0.1,50)
time_interval = seq(from=as.Date("2007-09-01"), to=as.Date("2013-09-01"), 
                    by="12 month")
r_twdtw = twdtwApply(x=rts, y=patt, weight.fun=log_fun, breaks=time_interval, 
          filepath="~/test_twdtw", overwrite=TRUE, format="GTiff")

r_lucc = twdtwClassify(r_twdtw, format="GTiff", overwrite=TRUE)

plotMaps(r_lucc)

# Map assessment 


  
}
}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
\seealso{
\code{\link[dtwSat]{twdtwRaster-class}}, and 
\code{\link[dtwSat]{twdtwClassify}}.
}

