% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twdtwClassify.R
\docType{methods}
\name{twdtwClassify}
\alias{twdtwClassify}
\alias{twdtwClassify,twdtwMatches-method}
\alias{twdtwClassify-twdtwTimeSeries}
\alias{twdtwClassify,twdtwRaster-method}
\alias{twdtwClassify-twdtwRaster}
\title{Classify time series}
\usage{
twdtwClassify(x, ...)

\S4method{twdtwClassify}{twdtwMatches}(x, patterns.labels = NULL,
  from = NULL, to = NULL, by = NULL, breaks = NULL, overlap = 0.5,
  thresholds = Inf, fill = "unclassified")

\S4method{twdtwClassify}{twdtwRaster}(x, patterns.labels = NULL,
  thresholds = Inf, fill = 255, filepath = "", ...)
}
\arguments{
\item{x}{an object of class twdtw*. This is the target time series. 
Usually, it is a set of unclassified time series.}

\item{...}{arguments to pass to specifique methods for each twdtw* class 
and other arguments to pass to \code{\link[raster]{writeRaster}} and 
\code{\link[raster]{pbCreate}}.}

\item{patterns.labels}{a vector with labels of the patterns.}

\item{from}{A character or \code{\link[base]{Dates}} object in the format "yyyy-mm-dd".}

\item{to}{A \code{\link[base]{character}} or \code{\link[base]{Dates}} object in the format "yyyy-mm-dd".}

\item{by}{A \code{\link[base]{character}} with the intevals size, \emph{e.g.} "6 month".}

\item{breaks}{A vector of class \code{\link[base]{Dates}}. This replaces the arguments \code{from},
\code{to}, and \code{by}.}

\item{overlap}{A number between 0 and 1. The minimum overlapping 
between one match and the interval of classification. Default is 0.5, 
\emph{i.e.} an overlap minimum of 50\%.}

\item{thresholds}{A numeric vector the same length as \code{patterns.labels}. 
The TWDTW dissimilarity thresholds, i.e. the maximum TWDTW cost for consideration 
in the classification. Default is \code{Inf} for all \code{patterns.labels}.}

\item{fill}{a character or value to fill the classification gaps. 
For signature \code{twdtwTimeSeries} the default is \code{fill="unclassified"}, and 
for signature \code{twdtwRaster} the default is \code{fill="unclassified"}.}

\item{filepath}{A character. The path to save the raster with results. If not informed the 
function saves in the same directory as the input time series raster.}
}
\value{
An object of class twdtw*.
}
\description{
This function classifies the intervals of a time series 
based on the TWDTW results.
}
\examples{
# Classifying time series based on TWDTW results 
ts = twdtwTimeSeries(MOD13Q1.ts.list)
patt = twdtwTimeSeries(MOD13Q1.patterns.list)
log_fun = logisticWeight(-0.1, 100)
time_intervals = seq(from=as.Date("2007-09-01"), to=as.Date("2013-09-01"), by="6 month")
mat = twdtwApply(x=ts, y=patt, weight.fun=log_fun, keep=TRUE)
best_mat = twdtwClassify(x=mat, breaks=time_intervals, overlap=0.5)
plot(x=best_mat, type="classification")

\dontrun{
require(parallel)
best_mat = mclapply(as.list(mat), mc.cores=2, FUN=twdtwClassify, breaks=time_intervals, overlap=0.5)
best_mat = twdtwMatches(alignments=best_mat)
}
\dontrun{
# Create raster time series
evi = brick(system.file("lucc_MT/data/evi.tif", package="dtwSat"))
ndvi = brick(system.file("lucc_MT/data/ndvi.tif", package="dtwSat"))
red = brick(system.file("lucc_MT/data/red.tif", package="dtwSat"))
blue = brick(system.file("lucc_MT/data/blue.tif", package="dtwSat"))
nir = brick(system.file("lucc_MT/data/nir.tif", package="dtwSat"))
mir = brick(system.file("lucc_MT/data/mir.tif", package="dtwSat"))
doy = brick(system.file("lucc_MT/data/doy.tif", package="dtwSat"))
timeline = scan(system.file("lucc_MT/data/timeline", package="dtwSat"), what="date")
rts = twdtwRaster(evi, ndvi, red, blue, nir, mir, timeline = timeline, doy = doy)

# Read fiels samples 
field_samples = read.csv(system.file("lucc_MT/data/samples.csv", package="dtwSat"))
proj_str = scan(system.file("lucc_MT/data/samples_projection", 
                package="dtwSat"), what = "character")

# Split samples for training (10\%) and validation (90\%) using stratified sampling 
library(caret) 
set.seed(1)
I = unlist(createDataPartition(field_samples$label, p = 0.1))
training_samples = field_samples[I,]
validation_samples = field_samples[-I,]

# Get time series form raster
training_ts = getTimeSeries(rts, y = training_samples, proj4string = proj_str)
validation_ts = getTimeSeries(rts, y = validation_samples, proj4string = proj_str)

# Create temporal patterns 
temporal_patterns = createPatterns(training_ts, freq = 8, formula = y ~ s(x))

# Set TWDTW weight function 
log_fun = weight.fun=logisticWeight(-0.1, 50)

# Run serial TWDTW analysis 
r_twdtw <- twdtwApply(x = rts, y = temporal_patterns, weight.fun = log_fun)
                                
# Run parallel TWDTW analysis
beginCluster()
r_twdtw <- twdtwApplyParallel(x = rts, y = temporal_patterns, weight.fun = log_fun)
endCluster()

# Classify raster based on the TWDTW analysis 
r_lucc = twdtwClassify(r_twdtw, format="GTiff", overwrite=TRUE)

plot(r_lucc)


}
}
\seealso{
\code{\link[dtwSat]{twdtwApply}}, 
\code{\link[dtwSat]{twdtwMatches-class}}, 
\code{\link[dtwSat]{twdtwTimeSeries-class}}, and 
\code{\link[dtwSat]{twdtwRaster-class}},
}
\author{
Victor Maus, \email{vwmaus1@gmail.com}
}
